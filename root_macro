Root_analise_maiorpt
====================

Macro que seleciona o lepton de maior pt

#include "TInterpreter.h"
#include "TCanvas.h"
#include "TSystem.h"
#include "TFile.h"
#include "TH2.h"
#include "TNtuple.h"
#include "TPaveLabel.h"
#include "TPaveText.h"
#include "TMath.h" 
#include "TFrame.h"
#include "TSystem.h"
#include "TInterpreter.h"
#include "TPad.h"
#include "TCanvas.h"
#include "TTree.h"
#include "TH1F.h"  
#include "TLatex.h"
#include "TLorentzVector.h"
#include <math.h>
#include <algorithm>
#include <list>



void histoaawwemut()
{


  TFile *_file0 = new TFile("aaww_m200_7tev.root");  //Arquivo formato root

  TTree *T = (TTree *)_file0->Get("T");   //tree

  //=============================================================================
  //Declaração das variaveis dos eletron, muons, neutrinos e particulas carregadas
  //=============================================================================

  int const NMUMAX=500;
  int n_mu=0;
  double mu_pt[NMUMAX];
  double mu_px[NMUMAX];
  double mu_py[NMUMAX];
  double mu_pz[NMUMAX];
  double mu_energy[NMUMAX];
  double mu_eta[NMUMAX];
  double mu_phi[NMUMAX];
  

  int const NVMUMAX=500;
  int n_vmu=0;
  double vmu_pt[NVMUMAX];
  double vmu_px[NVMUMAX];
  double vmu_py[NVMUMAX];
  double vmu_pz[NVMUMAX];
  double vmu_energy[NVMUMAX];
  double vmu_phi[NVMUMAX];
  double vmu_eta[NVMUMAX];

  int const NVEMAX=500;
  int n_ve=0;
  double ve_pt[NVEMAX];
  double ve_px[NVEMAX];
  double ve_py[NVEMAX];
  double ve_pz[NVEMAX];
  double ve_energy[NVEMAX];
  double ve_phi[NVEMAX];
  double ve_eta[NVEMAX];


  int const NEMAX=500;
  int n_e=0;
  double e_pt[NEMAX];
  double e_px[NEMAX];
  double e_py[NEMAX];
  double e_pz[NEMAX];
  double e_eta[NEMAX];
  double e_phi[NEMAX];
  double e_energy[NEMAX];

  int const NCHGMAX=500;
  int n_chg=0;
  double chg_pt[NCHGMAX];
  double chg_px[NCHGMAX];
  double chg_py[NCHGMAX];
  double chg_pz[NCHGMAX];
  double chg_eta[NCHGMAX];
  double chg_phi[NCHGMAX];
  double chg_energy[NCHGMAX];


  int const NW1MAX=500;
  int n_w1=0;
  double w1_pt[NW1MAX];
  double w1_px[NW1MAX];
  double w1_py[NW1MAX];
  double w1_pz[NW1MAX];
  double w1_energy[NW1MAX];
  double w1_mass[NW1MAX];
  double w1_transversemass[NW1MAX];
  double w1_phi[NW1MAX];
  double w1_cos[NW1MAX];
  double w1_eta[NW1MAX];


  int const NW2MAX=500;
  int n_w2=0;
  double w2_pt[NW2MAX];
  double w2_px[NW2MAX];
  double w2_py[NW2MAX];
  double w2_pz[NW2MAX];
  double w2_energy[NW2MAX];
  double w2_mass[NW2MAX];
  double w2_transversemass[NW2MAX];
  double w2_phi[NW2MAX];
  double w2_cos[NW2MAX];
  double w2_eta[NW2MAX];

  int const GAMAMAX=500;
  int n_a=0;
  double a_pz[GAMAMAX];
  double a_fracmom[GAMAMAX];
  double a_pini[GAMAMAX];
  double a_energy[GAMAMAX];

  // Branch dos Fotons
  T->SetBranchAddress("a_pz",&a_pz);
  T->SetBranchAddress("n_a",&n_a);
  T->SetBranchAddress("a_fracmom",&a_fracmom);
  T->SetBranchAddress("a_pini",&a_pini);
  T->SetBranchAddress("a_energy",&a_energy);

  // Branch dos Muons
  T->SetBranchAddress("n_mu",&n_mu);
  T->SetBranchAddress("mu_pt",&mu_pt);
  T->SetBranchAddress("mu_px",&mu_px);
  T->SetBranchAddress("mu_py",&mu_py);
  T->SetBranchAddress("mu_pz",&mu_pz);
  T->SetBranchAddress("mu_energy",&mu_energy);
  T->SetBranchAddress("mu_eta",&mu_eta);
  T->SetBranchAddress("mu_phi",&mu_phi);


  // Branch dos Eletrons
  T->SetBranchAddress("n_e",&n_e);
  T->SetBranchAddress("e_pt",&e_pt);
  T->SetBranchAddress("e_px",&e_px);
  T->SetBranchAddress("e_py",&e_py);
  T->SetBranchAddress("e_pz",&e_pz);
  T->SetBranchAddress("e_eta",&e_eta);
  T->SetBranchAddress("e_phi",&e_phi);
  T->SetBranchAddress("e_energy",&e_energy);

  // Branch das charged particles
  T->SetBranchAddress("n_chg",&n_chg);
  T->SetBranchAddress("chg_pt",&chg_pt);
  T->SetBranchAddress("chg_px",&chg_px);
  T->SetBranchAddress("chg_py",&chg_py);
  T->SetBranchAddress("chg_pz",&chg_pz);
  T->SetBranchAddress("chg_eta",&chg_eta);
  T->SetBranchAddress("chg_phi",&chg_phi);
  T->SetBranchAddress("chg_energy",&chg_energy);

  // Branch dos Neutrinos dos muons
  T->SetBranchAddress("vmu_pt",&vmu_pt);
  T->SetBranchAddress("vmu_px",&vmu_px);
  T->SetBranchAddress("vmu_py",&vmu_py);
  T->SetBranchAddress("vmu_pz",&vmu_pz);
  T->SetBranchAddress("n_vmu",&n_vmu);
  T->SetBranchAddress("vmu_eta",&vmu_eta);
  T->SetBranchAddress("vmu_phi",&vmu_phi);
  T->SetBranchAddress("vmu_energy",&vmu_energy);

  // Branch dos neutrinos dos eletrons
  T->SetBranchAddress("ve_pt",&ve_pt);
  T->SetBranchAddress("ve_px",&ve_px);
  T->SetBranchAddress("ve_py",&ve_py);
  T->SetBranchAddress("ve_pz",&ve_pz);
  T->SetBranchAddress("n_ve",&n_ve);
  T->SetBranchAddress("ve_eta",&ve_eta);
  T->SetBranchAddress("ve_phi",&ve_phi);
  T->SetBranchAddress("ve_energy",&ve_energy);

  //W+
  T->SetBranchAddress("n_w1",&n_w1);
  T->SetBranchAddress("w1_pt",&w1_pt);
  T->SetBranchAddress("w1_px",&w1_px);
  T->SetBranchAddress("w1_py",&w1_py);
  T->SetBranchAddress("w1_pz",&w1_pz);
  T->SetBranchAddress("w1_energy",&w1_energy);
  T->SetBranchAddress("w1_mass",&w1_mass);
  T->SetBranchAddress("w1_transversemass",&w1_transversemass);
  T->SetBranchAddress("w1_phi",&w1_phi);
  T->SetBranchAddress("w1_cos",&w1_cos);

  //W-
  T->SetBranchAddress("n_w2",&n_w2);
  T->SetBranchAddress("w2_pt",&w2_pt);
  T->SetBranchAddress("w2_px",&w2_px);
  T->SetBranchAddress("w2_py",&w2_py);
  T->SetBranchAddress("w2_pz",&w2_pz);
  T->SetBranchAddress("w2_energy",&w2_energy);
  T->SetBranchAddress("w2_mass",&w2_mass);
  T->SetBranchAddress("w2_transversemass",&w2_transversemass);
  T->SetBranchAddress("w2_phi",&w2_phi);
  T->SetBranchAddress("w2_cos",&w2_cos);



  //Declaração de Histogramas

  TH1F* h_nmu = new TH1F("nmu","nmu",100,0.,20.);
  TH1F* h_mu_pt = new TH1F("mu_pt","mu_pt",100,0.,1000.);
  TH1F* h_mu_px = new TH1F("mu_px","mu_px",100,0.,1000.);
  TH1F* h_mu_py = new TH1F("mu_py","mu_py",100,0.,1000.);
  TH1F* h_mu_pz = new TH1F("mu_pz","mu_pz",100,0.,1000.);
  TH1F* h_mu_eta = new TH1F("mu_eta","mu_eta",100,-5.0,5.0);
  TH1F* h_mu_phi = new TH1F("mu_phi","mu_phi",100,-M_PI,M_PI);
  TH1F* h_somamu_pt = new TH1F("somamu_pt","somamu_pt",100,0.,1000.);
  TH1F* h_mu_energy = new TH1F("mu_energy","mu_energy",100,0.,1000.);

  TH1F* h_ne = new TH1F("ne","ne",100,0.,20.);
  TH1F* h_e_pt = new TH1F("e_pt","e_pt",100,0.,1000.);
  TH1F* h_e_px = new TH1F("e_px","e_px",100,0.,1000.);
  TH1F* h_e_py = new TH1F("e_py","e_py",100,0.,1000.);
  TH1F* h_e_pz = new TH1F("e_pz","e_pz",100,0.,1000.);
  TH1F* h_e_eta = new TH1F("e_eta","e_eta",100,-5.0,5.0);
  TH1F* h_e_phi = new TH1F("e_phi","e_phi",100,-M_PI,M_PI);
  TH1F* h_somae_pt = new TH1F("somae_pt","somae_pt",100,0.,1000.);
  TH1F* h_e_energy = new TH1F("e_energy","e_energy",100,0.,1000.);
  
  //Neutrino muon

  TH1F* h_nvmu = new TH1F("nvmu","nvmu",100,0.,20.);
  TH1F* h_vmu_pt = new TH1F("vmu_pt","vmu_pt",100,0.,400.);
  TH1F* h_vmu_px = new TH1F("vmu_px","vmu_px",100,0.,400.);
  TH1F* h_vmu_py = new TH1F("vmu_py","vmu_py",100,0.,400.);
  TH1F* h_vmu_pz = new TH1F("vmu_pz","vmu_pz",100,0.,400.);
  TH1F* h_vmu_eta = new TH1F("vmu_eta","vmu_eta",100,-2.5,2.5);
  TH1F* h_vmu_energy = new TH1F("vmu_energy","vmu_energy",100,0.,1000.);
  TH1F* h_vmu_phi = new TH1F("vmu_phi","vmu_phi",100,-M_PI,M_PI);

  //neutrino eletron
  TH1F* h_nve = new TH1F("nve","nve",100,0.,20.);
  TH1F* h_ve_pt = new TH1F("ve_pt","ve_pt",100,0.,400.);
  TH1F* h_ve_px = new TH1F("ve_px","ve_px",100,0.,400.);
  TH1F* h_ve_py = new TH1F("ve_py","ve_py",100,0.,400.);
  TH1F* h_ve_pz = new TH1F("ve_pz","ve_pz",100,0.,400.);
  TH1F* h_ve_eta = new TH1F("ve_eta","ve_eta",100,-2.5,2.5);
  TH1F* h_ve_energy = new TH1F("ve_energy","ve_energy",100,0.,1000.);
  TH1F* h_ve_phi = new TH1F("ve_phi","ve_phi",100,-M_PI,M_PI);


  TH1F* h_nchg = new TH1F("nchg","nchg",100,0.,100.);
  TH1F* h_nchg_sel = new TH1F("nchg_sel","nchg_sel",100,0.,100.);
  TH1F* h_chg_ptdiff = new TH1F("chg_ptdiff","chg_ptdiff",100,0.,1500.);
  TH1F* h_chg_pt = new TH1F("chg_pt","chg_pt",200,0.,1000.);
  TH1F* h_chg_ptsel = new TH1F("chg_ptsel","chg_ptsel",200,0.,1000.);
  TH1F* h_chg_px = new TH1F("chg_px","chg_px",100,0.,1000.);
  TH1F* h_chg_py = new TH1F("chg_py","chg_py",100,0.,1000.);
  TH1F* h_chg_pz = new TH1F("chg_pz","chg_pz",100,0.,1000.);
  TH1F* h_chg_eta = new TH1F("chg_eta","chg_eta",100,-5.0,5.0);
  TH1F* h_chg_phi = new TH1F("chg_phi","chg_phi",100,-M_PI,M_PI);
  TH1F* h_chg_energy = new TH1F("chg_energy","chg_energy",100,0,1000);

  //soma eletron + muon( variaveis de quadrimomento)
  TH1F* h_somaemu_pt = new TH1F("somaemu_pt","somaemu_pt", 100,0.,1000.);
  TH1F* h_somaemu_m = new TH1F("somaemu_m","somaemu_m",180,0.,1500);
  TH1F* h_somamumu_pt = new TH1F("somamumu_pt","somamumu_pt",100,0.,500.);
  TH1F* h_somamumu_m = new TH1F("somamumu_m","somamumu_m",100,0.,500.);
  

  //Boson W+
  TH1F* h_nw1 = new TH1F("n_w1","n_w1",100,0.,20.);
  TH1F* h_w1_pt = new TH1F("w1_pt","w1_pt",100,0.,400.);
  TH1F* h_w1_px = new TH1F("w1_px","w1_px",100,0.,400.);
  TH1F* h_w1_py = new TH1F("w1_py","w1_py",100,0.,400.);
  TH1F* h_w1_pz = new TH1F("w1_pz","w1_pz",100,0.,400.);
  TH1F* h_w1_energy = new TH1F("w1_energy","w1_energy",100,0.,400.);
  TH1F* h_w1_mass = new TH1F("w1_mass","w1_mass",100,0.,1000.);
  TH1F* h_w1_transversemass = new TH1F("w1_transversemass","w1_transversemass",100,0.,1000.);
  TH1F* h_w1_phi = new TH1F("w1_phi","w1_phi",100,-M_PI,M_PI);
  TH1F* h_w1_cos = new TH1F("w1_cos","w1_cos",100,0.,M_PI);


  //Boson W-
  TH1F* h_nw2 = new TH1F("n_w2","n_w2",100,0.,20.);
  TH1F* h_w2_pt = new TH1F("w2_pt","w2_pt",100,0.,400.);
  TH1F* h_w2_px = new TH1F("w2_px","w2_px",100,0.,400.);
  TH1F* h_w2_py = new TH1F("w2_py","w2_py",100,0.,400.);
  TH1F* h_w2_pz = new TH1F("w2_pz","w2_pz",100,0.,400.);
  TH1F* h_w2_energy = new TH1F("w2_energy","w2_energy",100,0.,400.);
  TH1F* h_w2_mass = new TH1F("w2_mass","w2_mass",100,0.,1000.);
  TH1F* h_w2_transversemass = new TH1F("w2_transversemass","w2_transversemass",100,0.,1000.);
  TH1F* h_w2_phi = new TH1F("w2_phi","w2_phi",100,-M_PI,M_PI);
  TH1F* h_w2_cos = new TH1F("w2_cos","w2_cos",100,0.,M_PI);

  //====================================================================
  TH1F* h_a_pz = new TH1F("a_pz","a_pz",100,0.,400.);
  TH1F* h_a_fracmom = new TH1F("a_fracmom","a_fracmom",100,0.,1.);
  TH1F* h_a_pini = new TH1F("a_pini","a_pini",100,0.,2000.);
  TH1F* h_a_energy = new TH1F("a_energy","a_energy",100,0.,1000.);
  //======================================================================
  
  //======================================================================
  //Variaveis combinadas usando o quadrimomento
  TH1F* h_emu_aco = new TH1F("emu_aco","emu_aco",100,-5.,5);
  TH1F* h_somamuvmu = new TH1F("somamuvmu","somamuvmu",100,0.,150);
  TH1F* h_somamuvmutrans = new TH1F("somamuvmutrans","somamuvmutrans",100,0.,500);
  TH1F* h_somaeve = new TH1F("somaeve","somaeve",100,0.,150);
  TH1F* h_somatotal = new TH1F("somatotal","somatotal",100,0.,2000);
  TH1F* h_energiatotal = new TH1F("energiatotal","energiatotal",100,0.,2000);
  TH1F* h_azidiffemu = new TH1F("azidiffemu","azidiffemu",100,-3.14,3.14);
  //======================================================================

  //======================================================================
  //Loop na tree
  //======================================================================
  Int_t nentries = (Int_t)T->GetEntries();
  for (Int_t i=0; i<nentries; i++) {
    T->GetEntry(i);
    //======================================================================

    //======================================================================
    // Loops sobre as partículas
    //======================================================================

    //======================================================================
    //Momento transverso muon
    //======================================================================
    int imu_maxpt = -1.;     
    double mu_pt_max=0.;
    for(int imu = 0; imu < n_mu; ++imu) {
      if( mu_pt[imu] > mu_pt_max ){
	imu_maxpt=imu ;
	mu_pt_max = mu_pt[imu];
      }
      //Seleciona o lepton de maior pt

      double mu1_pt = mu_pt[imu_maxpt];
      double mu1_px = mu_px[imu_maxpt];
      double mu1_py = mu_py[imu_maxpt];
      double mu1_pz = mu_pz[imu_maxpt];
      double mu1_eta = mu_eta[imu_maxpt];
      double mu1_phi = mu_phi[imu_maxpt];
      double mu1_energy = mu_energy[imu_maxpt];   

      TLorentzVector mu1p4(mu1_px,mu1_py,mu1_pz,mu1_energy);
      if(mu1p4.Pt()>0)
	{
	  h_mu_pt->Fill(mu1p4.Pt());
	}

      h_mu_px->Fill(mu1p4.Px());
      h_mu_py->Fill(mu1p4.Py());
      h_mu_pz->Fill(mu1p4.Pz());
      h_mu_eta->Fill(mu1_eta);    
      h_mu_phi->Fill(mu1p4.Phi());    
      h_mu_energy->Fill(mu1p4.E());    
      h_nmu->Fill(n_mu);         
   
      //======================================================================


      //======================================================================
      // Neutrino muon
      //======================================================================
      int ivmu_maxpt = -1.;     
      double vmu_pt_max=0.;
      for(int ivmu = 0; ivmu < n_vmu; ++ivmu) {
	if( vmu_pt[ivmu] > vmu_pt_max ){
	  ivmu_maxpt = ivmu;
	  vmu_pt_max = vmu_pt[ivmu];
	}
    
	double vmu1_pt = vmu_pt[ivmu_maxpt];
	double vmu1_px = vmu_px[ivmu_maxpt];
	double vmu1_py = vmu_py[ivmu_maxpt];
	double vmu1_pz = vmu_pz[ivmu_maxpt];
	double vmu1_eta=vmu_eta[ivmu_maxpt];
	double vmu1_phi=vmu_phi[ivmu_maxpt];
	double vmu1_energy=vmu_energy[ivmu_maxpt];

	TLorentzVector vmu1p4(vmu1_px,vmu1_py,vmu1_pz,vmu1_energy);
	h_nvmu->Fill(n_vmu);    
	h_vmu_pt->Fill(vmu1p4.Pt());
	h_vmu_px->Fill(vmu1p4.Px());
	h_vmu_py->Fill(vmu1p4.Py());
	h_vmu_pz->Fill(vmu1p4.Pz());
	h_vmu_eta->Fill(vmu1_eta);    
	h_vmu_phi->Fill(vmu1p4.Phi());    
	h_vmu_energy->Fill(vmu1p4.E());    
	//======================================================================


	//======================================================================
	// neutrino eletron
	//======================================================================
	int ive_maxpt = -1.;     
	double ve_pt_max=0.;
	for(int ive = 0; ive < n_ve; ++ive) {
	  if( ve_pt[ive] > ve_pt_max ){
	    ive_maxpt = ive;
	    ve_pt_max = ve_pt[ive];
	  }
    
	  double ve1_pt = ve_pt[ive_maxpt];
	  double ve1_px = ve_px[ive_maxpt];
	  double ve1_py = ve_py[ive_maxpt];
	  double ve1_pz = ve_pz[ive_maxpt];
	  double ve1_eta = ve_eta[ive_maxpt];
	  double ve1_phi = ve_phi[ive_maxpt];
	  double ve1_energy = ve_energy[ive_maxpt];


	  TLorentzVector ve1p4(ve1_px,ve1_py,ve1_pz,ve1_energy);
	  h_ve_pt->Fill(ve1p4.Pt());
	  h_ve_px->Fill(ve1p4.Px());
	  h_ve_py->Fill(ve1p4.Py());
	  h_ve_pz->Fill(ve1p4.Pz());
	  h_ve_eta->Fill(ve1_eta);    
	  h_ve_phi->Fill(ve1p4.Phi());    
	  h_ve_energy->Fill(ve1p4.E());    
	  h_nve->Fill(n_ve); 
    
	  //======================================================================
	  //Eletron
	  //======================================================================
	  int ie_maxpt = -1.;     
	  double e_pt_max=0.;
	  for(int ie = 0; ie < n_e; ++ie) {
	    if( e_pt[ie] > e_pt_max){
	      ie_maxpt = ie;
	      e_pt_max = e_pt[ie];
	    }   
    
	    double e1_pt = e_pt[ie_maxpt];
	    double e1_px = e_px[ie_maxpt];
	    double e1_py = e_py[ie_maxpt];
	    double e1_pz = e_pz[ie_maxpt];
	    double e1_eta =e_eta[ie_maxpt];
	    double e1_phi = e_phi[ie_maxpt];
	    double e1_energy = e_energy[ie_maxpt];

	    TLorentzVector e1p4(e1_px,e1_py,e1_pz,e1_energy);

	    if(e1p4.Pt()>0)
	      {
		h_e_pt->Fill(e1p4.Pt());
	      }
   
	    h_ne->Fill(n_e);         
	    h_e_px->Fill(e1p4.Px());
	    h_e_py->Fill(e1p4.Py());
	    h_e_pz->Fill(e1p4.Pz());
	    h_e_energy->Fill(e1p4.E());    
	    h_e_eta->Fill(e1_eta);    
	    h_e_phi->Fill(e1_phi);        
	    //======================================================================


	    //======================================================================
	    //variaveis combinadas, soma dos pts, massa invariante, massa total,
	    //massa transversa
	    //======================================================================
	    if((e1p4+mu1p4).Pt()>0)
	      {
		h_somaemu_pt->Fill((e1p4+mu1p4).Pt()); 
	      }
	    h_somamumu_pt->Fill((mu1p4+mu1p4).Pt()); 
	    h_somaeve->Fill((e1p4+ve1p4).M());
	    h_somatotal->Fill((e1p4+ve1p4+mu1p4+vmu1p4).M());
	    h_energiatotal->Fill((e1p4+ve1p4+ mu1p4 +vmu1p4).E()); 
	    h_somamuvmu->Fill((mu1p4+vmu1p4).M());          
	    h_somamuvmutrans->Fill((mu1p4+vmu1p4).Mt());   
	    h_somaemu_m->Fill((mu1p4+e1p4).M());          
	    h_somamumu_m->Fill((mu1p4+mu1p4).M());          
	    h_azidiffemu->Fill((e1p4-mu1p4).Phi());
            h_emu_aco-> Fill(1-abs((e1p4-mu1p4).Phi())/M_PI);  	

	    //======================================================================
	    //charged particles
	    //======================================================================

	    for(int chg = 0; chg < n_chg; ++chg) {
	      double chg1_pt = chg_pt[chg];
	      double chg1_eta =chg_eta[chg];
	      double chg1_phi = chg_phi[chg];
	      double chg1_energy = chg_energy[chg];
	      double chg1_px = chg_px[chg];
	      double chg1_py = chg_py[chg];
	      double chg1_pz = chg_pz[chg];

	      int nchg_sel=0;
	      TLorentzVector chgp4(chg1_px,chg1_py,chg1_pz,chg1_energy);
      
	      h_chg_px->Fill(chgp4.Px());
	      h_chg_py->Fill(chgp4.Py());
	      h_chg_pz->Fill(chgp4.Pz());
	      h_chg_eta->Fill(chgp4.Eta());
	      h_chg_phi->Fill(chgp4.Phi());
	      h_chg_energy->Fill(chgp4.E());
	      h_chg_pt->Fill(chgp4.Pt());
	      h_nchg->Fill(n_chg);         

	      //Seleção nos traços das partículas carregadas
	      if(chgp4.Pt()-e1p4.Pt()>0.5 && chgp4.Pt()-mu1p4.Pt()>0.5 &&  -2.5 < chgp4.Eta() < 2.5){
		h_chg_ptsel->Fill(chgp4.Pt());
	      }
	      if(chgp4.Pt()>0.5 && -2.5 < chgp4.Eta() < 2.5){
		h_nchg_sel->Fill(n_chg);        
	      }
 
	    }


   
	    //======================================================================
	    //Observação: Seleção nos traços da particulas carregadas com requerimentos
	    //de pt, eta, e forma de excluir da contagem das particulas carregadas
	    //os leptons e,mu



	    //======================================================================
	    //Boson W+
	    //======================================================================

	    for(int iw1 = 0; iw1 < n_w1; ++iw1) {
	      h_w1_pt->Fill(w1_pt[iw1]);
	      h_w1_px->Fill(w1_px[iw1]);
	      h_w1_py->Fill(w1_py[iw1]);
	      h_w1_pz->Fill(w1_pz[iw1]);
	      h_w1_energy->Fill(w1_energy[iw1]);
	      h_w1_mass->Fill(w1_mass[iw1]);
	      h_w1_transversemass->Fill(w1_transversemass[iw1]);
	      h_w1_phi->Fill(w1_phi[iw1]);
	      h_w1_cos->Fill(w1_cos[iw1]);
	    }
	    h_nw1->Fill(n_w1);          
	    //Boson W-
	    for(int iw2 = 0; iw2 < n_w2; ++iw2) {
	      h_w2_pt->Fill(w2_pt[iw2]);
	      h_w2_px->Fill(w2_px[iw2]);
	      h_w2_py->Fill(w2_py[iw2]);
	      h_w2_pz->Fill(w2_pz[iw2]);
	      h_w2_energy->Fill(w2_energy[iw2]);
	      h_w2_mass->Fill(w2_mass[iw2]);
	      h_w2_transversemass->Fill(w2_transversemass[iw2]);
	      h_w2_phi->Fill(w2_phi[iw2]);
	      h_w2_cos->Fill(w2_cos[iw2]);
	    }
	    h_nw2->Fill(n_w2);          
	    //======================================================================  

	    //======================================================================
	    //Fotons
	    //======================================================================
	    for(int ia = 0; ia < n_a; ++ia) {
	      h_a_pz->Fill(a_pz[ia]);
	      h_a_pini->Fill(sqrt(a_pz[ia]/3500*a_pz[ia]/3500)*7000);
	      h_a_energy->Fill(a_energy[ia]);
	      h_a_fracmom->Fill(a_pz[ia]/3500);
	    }
	    //======================================================================


    
	  }//loop eletron
	}//loop neutrino eletron
      }//loop neutrino muon
    }//loop muon
    
  } //Fim do loop na tree

    
  //===================================================================
  //Normalização
  //====================================================================
   
  Double_t  L_int = 5;
  Double_t sigma_wwinc =3.5;  
  Double_t N_ww = 46817;    
  Double_t scale1 = (sigma_wwinc * L_int)/(N_ww);  
    
  h_mu_pt->Scale(scale1);
  h_mu_px->Scale(scale1);
  h_mu_py->Scale(scale1);
  h_mu_pz->Scale(scale1);
  h_somamu_pt->Scale(scale1);
  h_somaemu_pt->Scale(scale1);
  h_somamumu_pt->Scale(scale1);
  h_nmu->Scale(scale1);
  h_mu_eta->Scale(scale1);
  h_mu_phi->Scale(scale1);
  h_mu_energy->Scale(scale1);
  //====================================
  h_nvmu->Scale(scale1);
  h_vmu_pt->Scale(scale1);
  h_vmu_px->Scale(scale1);
  h_vmu_py->Scale(scale1);
  h_vmu_pz->Scale(scale1);
  h_vmu_phi->Scale(scale1);
  h_vmu_eta->Scale(scale1);
  h_vmu_energy->Scale(scale1);
  //===================================
  h_nve->Scale(scale1);
  h_ve_pt->Scale(scale1);
  h_ve_px->Scale(scale1);
  h_ve_py->Scale(scale1);
  h_ve_pz->Scale(scale1);
  h_ve_phi->Scale(scale1);
  h_ve_eta->Scale(scale1);
  h_ve_energy->Scale(scale1);
  //===================================
  h_ne->Scale(scale1);
  h_e_pt->Scale(scale1);
  h_e_px->Scale(scale1);
  h_e_py->Scale(scale1);
  h_e_pz->Scale(scale1);
  h_e_energy->Scale(scale1);
  h_e_eta->Scale(scale1);
  h_e_phi->Scale(scale1);
  h_somae_pt->Scale(scale1);
  //====================================     
  h_nchg->Scale(scale1);
  h_nchg_sel->Scale(scale1);
  h_chg_pt->Scale(scale1);
  h_chg_ptsel->Scale(scale1);
  h_chg_ptdiff->Scale(scale1);
  h_chg_px->Scale(scale1);
  h_chg_py->Scale(scale1);
  h_chg_pz->Scale(scale1);
  h_chg_eta->Scale(scale1);
  h_chg_energy->Scale(scale1);
  h_chg_phi->Scale(scale1);
  //===================================    
  h_w1_pt->Scale(scale1);
  h_w1_px->Scale(scale1);
  h_w1_py->Scale(scale1);
  h_w1_pz->Scale(scale1);
  h_w1_energy->Scale(scale1);
  h_w1_mass->Scale(scale1);
  h_w1_transversemass->Scale(scale1);
  h_w1_cos->Scale(scale1);
  h_w1_phi->Scale(scale1);
  //===================================
  h_w2_pt->Scale(scale1);
  h_w2_px->Scale(scale1);
  h_w2_py->Scale(scale1);
  h_w2_pz->Scale(scale1);
  h_w2_energy->Scale(scale1);
  h_w2_mass->Scale(scale1);
  h_w2_transversemass->Scale(scale1);
  h_w2_cos->Scale(scale1);
  h_w2_phi->Scale(scale1);
  //===================================
  h_emu_aco->Scale(scale1);
  h_somamuvmu->Scale(scale1);
  h_somamuvmutrans->Scale(scale1);
  h_somatotal->Scale(scale1);
  h_energiatotal->Scale(scale1);
  h_somaeve->Scale(scale1);
  h_somaemu_m->Scale(scale1);
  h_somamumu_m->Scale(scale1);
  h_azidiffemu->Scale(scale1);
  //==================================
  h_a_pz->Scale(scale1);
  h_a_pini->Scale(scale1);
  h_a_fracmom->Scale(scale1);
  h_a_energy->Scale(scale1);
  //==========================================

  //========================================================================
  //arquivo de saida
  TFile* output = new TFile("aaww_m200analise_7tev.root","RECREATE");
  //========================================================================
  h_nmu->Write();     
  h_mu_pt->Write();
  h_mu_px->Write();
  h_mu_py->Write();
  h_mu_pz->Write();
  h_mu_energy->Write();
  h_mu_eta->Write();
  h_mu_phi->Write();
  //========================================================================
  h_nvmu->Write();
  h_vmu_pt->Write();
  h_vmu_px->Write();
  h_vmu_py->Write();
  h_vmu_pz->Write();
  h_vmu_eta->Write();
  h_vmu_phi->Write();
  h_vmu_energy->Write();
  //========================================================================
  h_nve->Write();
  h_ve_pt->Write();
  h_ve_px->Write();
  h_ve_py->Write();
  h_ve_pz->Write();
  h_ve_eta->Write();
  h_ve_phi->Write();
  h_ve_energy->Write();
  //========================================================================
  h_ne->Write();     
  h_e_pt->Write();
  h_e_px->Write();
  h_e_py->Write();
  h_e_pz->Write();
  h_e_energy->Write();
  h_e_eta->Write();
  h_e_phi->Write();
  //========================================================================
  h_nchg->Write();     
  h_nchg_sel->Write();     
  h_chg_pt->Write();
  h_chg_ptsel->Write();
  h_chg_ptdiff->Write();
  h_chg_px->Write();
  h_chg_py->Write();
  h_chg_pz->Write();
  h_chg_eta->Write();
  h_chg_energy->Write();
  h_chg_phi->Write();
  //========================================================================
  h_somaemu_pt->Write();
  h_somamumu_pt->Write();
  //========================================================================
  h_w1_pt->Write();
  h_w1_px->Write();
  h_w1_py->Write();
  h_w1_pz->Write();
  h_w1_energy->Write();
  h_w1_mass->Write();
  h_w1_transversemass->Write();
  h_w1_cos->Write();
  h_w1_phi->Write();
  //========================================================================
  h_w2_pt->Write();
  h_w2_px->Write();   
  h_w2_py->Write();
  h_w2_pz->Write();
  h_w2_energy->Write();
  h_w2_mass->Write();
  h_w2_transversemass->Write();
  h_w2_cos->Write();
  h_w2_phi->Write();
  //========================================================================
  h_emu_aco->Write();
  h_somamuvmu->Write();
  h_somaemu_m->Write();
  h_somamumu_m->Write();
  h_somamuvmutrans->Write();
  h_somaeve->Write();
  h_somatotal->Write();
  h_energiatotal->Write();
  h_azidiffemu->Write();
  //========================================================================
  h_a_pz->Write();
  h_a_energy->Write();
  h_a_pini->Write();
  h_a_fracmom->Write();
  //========================================================================

  output->Close();
} //Fim do programa


//===========================================================================
//Observações
//==========================================================================
//120 bin , 25, 12.5 GeV
//Implementei a condição para separar o pt das particulas carregadas sem contar os eletrons e muons, 
//escrevi o quadri momento das particulas e requeri que a subtração desse valor fosse maior que zero




